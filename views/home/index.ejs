<%- include('../includes/head.ejs') %>
<%- include('../includes/navigation.ejs') %>
<%- include('../includes/page-header.ejs') %>
<main>
    <div class="container">
        <div class="container complexities__container">
                <div class="row">
                    <div class="col-8">
                        <img class="big-o__image" src="./images/big-o-notation-graph.png" alt="Big O Notation Graph">
                    </div>
                    <div class="col-4">
                        <h5 class="complexities__title text-primary">Complexities</h5>
                        <ul class="list__items">
                            <li><a class="text-secondary" href="#constant">Constant Time O(1)</a></li>
                            <li><a class="text-secondary" href="#linear">Linear Time O(n)</a></li>
                            <li><a class="text-secondary" href="#quadratic">Quadratic Time O(n^2)</a></li>
                            <li><a class="text-secondary" href="#polynomial">Polynomial Time O(n^c)</a></li>
                            <li><a class="text-secondary" href="#logarithmic">Logarithmic Time O(log n)</a></li>
                            <li><a class="text-secondary" href="#linearithmic">Linearithmic Time O(n log n)</a></li>
                            <li><a class="text-secondary" href="#exponential">Exponential Time O(2^n)</a></li>
                            <li><a class="text-secondary" href="#factorial">Factorial Time O(n!)</a></li>
                        </ul>
                    </div>
                </div>
                <div class="row complexity-details__container" id="constant">
                    <div class="col-1"></div>
                    <div class="col-10">
                        <h4 class="text-primary">Constant Time: O(1)</h4>
                        <ul class="text-secondary">
                            <li>Find odd/even numbers</li>
                            <li>Check if an item in an array is <code>null</code></li>
                            <li>Print the first element in a list</li>
                            <li>Find a value on a map</li>
                        </ul>
                        <br />
                        <h6 class="text-secondary example-title">Example:</h6>
                        <div class="code-detail__container">
                            <code>isEvenOrOdd = (n) => {  return n % 2 !== 0 ? 'Odd' : 'Even' };</code>
                        </div>
                    </div>
                </div>
                <div class="row complexity-details__container" id="linear">
                    <div class="col-1"></div>
                    <div class="col-10">
                        <h4 class="text-primary">Linear Time: O(n)</h4>
                        <ul class="text-secondary">
                            <li>Find the Max element in an array</li>
                            <li>Find the Min value in an array</li>
                            <li>Print all values in a list</li>
                        </ul>
                        <br />
                        <h6 class="text-secondary example-title">Example:</h6>
                        <div class="code-detail__container">
                            <code style="white-space: pre;">findMin = (arr) => {
    let min = arr[0]; 
    for (let i = 0; i < arr.length; i++) { 
        if (min < arr[i]) {
            min = arr[i];
        }
    } 
    return min;
}</code>
                        </div>
                    </div>
                </div>
                <div class="row complexity-details__container" id="quadratic">
                    <div class="col-1"></div>
                    <div class="col-10">
                        <h4 class="text-primary">Quadratic Time: O(n^2)</h4>
                        <ul class="text-secondary">
                            <li>Check if a collection has duplicate values</li>
                            <li>Sorting items in a collection using <code>Bubble Sort</code></li>
                            <li>Sorting items in a collection using <code>Insertion Sort</code></li>
                            <li>Sorting items in a collection using <code>Selection Sort</code></li>
                            <li>Find all possible ordered pairs in an array</li>
                        </ul>
                        <br />
                        <h6 class="text-secondary example-title">Example:</h6>
                        <code style="white-space: pre;">bubbleSort = (arr, length) => {
    let temp;
    for (let i = 0; i < length - 1; i++) {
        for (let j = 0; j < length - i - 1; j++) {
            if (arr[j] > arr[j + 1] {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            });
        }
    }
    return arr;
}</code>
                    </div>
                </div>
                <div class="row complexity-details__container" id="polynomial">
                    <div class="col-1"></div>
                    <div class="col-10">
                        <h4 class="text-primary">Polynomial(Cubic) Time: O(n^3)</h4>
                        <ul class="text-secondary">
                            <li>3 Variable Equation Solver(Triple Nested Loops)</li>
                        </ul>
                        <br />
                        <h6 class="text-secondary example-title">Example:</h6>
                        <code style="white-space: pre;">findXYZ = (n) => {
    const solutions = [];
    for (let x = 0; x < n; x++) {
        for (let y = 0; y < n; y++) {
            for (let z = 0; z < n; z++) {
                if (3*x + 9*y + 8*z === 79) {
                    solutions.push({x, y, z});
                }
            }
        }
    }                   
    return solutions;     
}
                        </code>
                    </div>
                </div>
                <div class="row complexity-details__container" id="logarithmic">
                    <div class="col-1"></div>
                    <div class="col-10">
                        <h4 class="text-primary">Logarithmic Time: O(log n)</h4>
                        <ul class="text-secondary">
                            <li>Finding element in sorted array with <code>Binary Search</code></li>
                            <li>Usually applies to algorithms that divide problems in half every time</li>
                        </ul>
                        <br />
                        <h6 class="text-secondary example-title">Example:</h6>
                        <code style="white-space: pre;">indexOfBinarySearch = () => {
    // Split the array in half
    const half = parseInt(array.length / 2);
    const current = array[half];

    if (current === element) {
        return offset + half;
    } else if (element > current) {
        const right = array.slice(half);
        return indexOfBinarySearch(right, element, offset + half);
    } else {
        const left = array.slice(0, half);
        return indexOfBinarySearch(left, element, offset);
    }
}
                        </code>
                    </div>
                </div>
                <div class="row complexity-details__container" id="linearithmic">
                    <div class="col-1"></div>
                    <div class="col-10">
                        <h4 class="text-primary">Linearithmic Time: O(n log n)</h4>
                        <ul class="text-secondary">
                            <li>Sorting elements in array with <code>Merge Sort</code></li>
                            <li>Efficient sorting algorithms like <Code>Quick Sort</Code> etc</li>
                        </ul>
                        <br />
                        <h6 class="text-secondary example-title">Example:</h6>
                        <code style="white-space: pre;">sort = (arr = []) => {
    const size = arr.length;

    // Base Case
    if (size < 2) {
        return array;
    }
    if (size === 2) {
        return arr[0] > arr[1] ? [arr[1], arr[0]] : arr;</2>
    }
    // Split & Merge
    const mid = parseInt(size / 2, 10);
    return merge(sort(array.slice(0, mid)), sort(array.slice(mid)));
}

merge = (array1 = [], array2 = []) => {
    const merged = [];
    let array1Index = 0;
    let array2Index = 0;

    while(array1Index < array1.length || array2Index < array2.length) {
        if (array1Index >= array1.length || array1[array1Index] > array2[array2Index]) {
            merged.push(array2[array2Index]);
            array2Index += 1;
        } else {
            merged.push(array1[array1Index]);
            array1Index += 1;
        }
    }
    return merged;
}</code>
                    </div>
                </div>
                <div class="row complexity-details__container" id="exponential">
                    <div class="col-1"></div>
                    <div class="col-10">
                        <h4 class="text-primary">Exponential Time: O(2^n)</h4>
                        <ul class="text-secondary">
                            <li>Power Set: Find all subsets on a set</li>
                            <li>Fibonacci Sequence</li>
                            <li>Travelling Saleman Problem using dynamic programming(Find the shortest path)</li>
                        </ul>
                        <br />
                        <h6 class="text-secondary example-title">Example:</h6>
                        <code style="white-space: pre;">powerSet = (n = '') => {
    const arr = Array.from(n);
    const base = [''];
    
    const results = arr.reduce((previous, element) => {
        const previousPlusElement = previous.map(el => {
            return `${el}${element}`;
        });
        return previous.concat(previousPlusElement);
    }, base);
    return results;
}</code>
                    </div>
                </div>
                <div class="row complexity-details__container" id="factorial">
                    <div class="col-1"></div>
                    <div class="col-10">
                        <h4 class="text-primary">Factorial Time: O(n!)</h4>
                        <ul class="text-secondary">
                            <li>Find all permutations of a given set/string</li>
                            <li>Solving the travelling salesman problem with a brute-force search</li>
                        </ul>   
                        <br />
                        <h6 class="text-secondary example-title">Example:</h6>
                        <code style="white-space: pre;">getPermutations = (string, prefix = '') => {
    if (string.length <= 1) {
        return [prefix + string];
    }

    return Array.from(string).reduce((result, char, index) => {
        const remainder = string.slice(0, index) + string.slice(index + 1);
        result = result.concat(getPermutations(remainder, prefix + char));
        return result;
    }, []);
}</code>
                    </div>
                </div>
                <div class="row final-notes" style="margin-bottom: 35px;">
                    <div class="col-1"></div>
                    <div class="col-10">
                        <h4 class="text-primary" style="text-decoration: underline;">NOTES:</h4>
                        <ul class="text-secondary" style="margin-top: 25px;">
                            <li><code>n</code> indicates the size of the input</li>
                            <li><code>O</code> indicates the worst case scenario</li>
                            <li>The <code>O(n)</code> function is the growth rate in the function of input size <code>n</code></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>
<%- include('../includes/end.ejs') %>